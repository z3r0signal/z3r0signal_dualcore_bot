import os
from flask import Flask, request, jsonify
import requests
import openai

app = Flask(__name__)

# –°–µ–∫—Ä–µ—Ç—ã
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def index():
    return "z3r0signal dualcore bot is live"

# –¢–µ—Å—Ç–æ–≤—ã–π –ø–∏–Ω–≥
@app.route("/ping")
def ping():
    text = "üîÅ Test ping using @username format."
    send_message(text)
    return jsonify({"status": "ok", "sent": text})

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route("/signal", methods=["POST"])
def signal():
    data = request.get_json()
    user_msg = data.get("message", {}).get("text", "")
    if not user_msg:
        return jsonify({"status": "error", "msg": "no message"}), 400

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã DeepSeek, –ª–æ–≥–∏—á–µ—Å–∫–∏–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª z3r0signal."},
                {"role": "user", "content": user_msg}
            ]
        )
        reply = response.choices[0].message.content.strip()
        send_message(f"ü§ñ DeepSeek: {reply}")
        return jsonify({"status": "ok", "sent": reply})
    except Exception as e:
        return jsonify({"status": "error", "msg": str(e)}), 500

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_message(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    requests.post(url, json=payload)

if __name__ == "__main__":
    app.run(debug=True)
